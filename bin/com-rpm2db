#!/usr/bin/python

# here is some internal information
# $Id: rpm2db.py,v 1.1 2006/08/08 08:32:38 marc Exp $
#

__version__ = "$revision$"
__description__="""
Programm to update all installed rpms in the database
"""

# $Source: /usr/ATIX/CVSROOT/projects/se/hilti/config/hoi_config/scripts/rpm2db.py,v $
import sys
import logging
import logging.handlers

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

from comoonics import ComLog
from comoonics.ComExceptions import ComException
try:
    from comoonics.tools.ComSystemInformation import SystemInformation
except ImportError:
    from comoonics.ComSystemInformation import SystemInformation
from comoonics.cmdb.ComSoftwareCMDB import SoftwareCMDB
from comoonics.cmdb.ComDSL import DSL
from comoonics.cmdb.ComSource import Source
try:
    from comoonics.tools.poptparse import PersistentOptionParser as OptionParser
    from comoonics.cmdb import get_defaultsenvkey, get_defaultsfiles
except ImportError:
    from optparse import OptionParser
from optparse import OptionGroup, make_option

import logging
logging.basicConfig()
version="0.1"

ComLog.setLevel(logging.INFO)

usage="usage: %prog [options] [category] [rpmfiles]"
cmd_options= [ make_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="toggle verbose mode to be more helpful"),
               make_option("-y", "--syslog", action="store", type="string", dest="syslog", default="", help="Forward logmessages to given syslogserver")]
try:
    cmd_parser = OptionParser(option_list=cmd_options, usage=usage, version="Version %s" %(version), 
                              globaldefaultsfile=get_defaultsfiles()[0], localdefaultsfile=get_defaultsfiles()[1], 
                              localdefaultsenvkey=get_defaultsenvkey())
except (TypeError, NameError):
    cmd_parser = OptionParser(option_list=cmd_options, usage=usage, version="Version %s" %(version))    
packages2db_options = OptionGroup(cmd_parser, "package 2 DB options")
packages2db_options.add_option("-a", "--action", action="store", type="choice", choices=["update", "remove" ], default="update", dest="action", 
                               help="What kind of action should be applied. Possible values are: update, add. Default is: %default.")
packages2db_options.add_option("-c", "--category", action="store", type="string", default=None, dest="category", 
                               help="Either specify category over this option or give it as first argument. Default is: %default.")
cmd_parser.add_option_group(packages2db_options)
db_options = OptionGroup(cmd_parser, "Database Options")
db_options.add_option("-q", "--querydatabase", action="store_true", default=False, dest="querydatabase", help="Query a database instead of localhost on the fly.")
db_options.add_option("-d", "--database", action="store", type="string", dest="database", default="cmdb", help="Sets the databasename")
db_options.add_option("-H", "--hostname", action="store", type="string", dest="hostname", default="localhost", help="Sets the hostname for the database server")
db_options.add_option("-u", "--username", action="store", type="string", dest="username", help="Sets the database username")
db_options.add_option("-p", "--password", action="store", type="string", dest="password", help="Sets the database server password to the username")
db_options.add_option("-t", "--table", action="store", type="string", dest="table", default="software_cmdb", help="Which table to be taken.")
cmd_parser.add_option_group(db_options)

options, args=cmd_parser.parse_args()
argsindex=0
if options.verbose:
    ComLog.setLevel(logging.DEBUG)
if args:
    category=args[argsindex]
    argsindex+=1
elif options.category:
    category=options.category
else:
    sys.stderr.write("You need to give at least one parameter as argument for the category of this system to be recognized with.\n")
    sys.exit(1)
if options.querydatabase:
    if not args[argsindex]:
        sys.stderr.write("If you want to query a system from database you need to specify the systemname.\n")
        sys.exit(2)
    sname=args[argsindex]
    argsindex+=1
if len(args) > 1:
    rpmfiles=args[argsindex:]
else:
    rpmfiles=list()

software_cmdb=SoftwareCMDB(hostname=options.hostname, user=options.username, password=options.password, 
                           database=options.database, table=options.table)
dsl=DSL(dbhandle=software_cmdb.db, table="dsl")
source=Source(dbhandle=software_cmdb.db)
if options.querydatabase:
    systeminformation=source.getSourceAsSysteminformation(sname)
else:
    systeminformation=SystemInformation()
source.setLogsource(systeminformation.getName())
dsl.setLogsource(systeminformation.getName())
software_cmdb.setLogsource(systeminformation.getName())

if options.syslog:
    sysloghandler=logging.handlers.SysLogHandler((options.syslog, logging.handlers.SYSLOG_UDP_PORT), logging.handlers.SysLogHandler.LOG_USER)
    sysloghandler.setLevel(logging.INFO)
    software_cmdb.log.addHandler(sysloghandler)
    dsl.log.addHandler(sysloghandler)
    source.log.addHandler(sysloghandler)
    software_cmdb.dblog.addHandler(sysloghandler)
    dsl.dblog.addHandler(sysloghandler)
    source.dblog.addHandler(sysloghandler)

if options.action=="update":

    print("Updating Systeminformation of "+systeminformation.getName())

    source.updateSystemInformation(systeminformation, category)

    print("Updating RPMS of "+systeminformation.getName()+ " filter: %s" %(rpmfiles))

    if not rpmfiles or len(rpmfiles) == 0:
        rpms=systeminformation.getInstalledSoftware()
    else:
        rpms=list()
        for rpmname in rpmfiles:
            rpms+=systeminformation.getInstalledSoftware(rpmname)

    rpmnames=list()
    for rpm_hdr in rpms:
        rpmnames.append(rpm_hdr["name"])

    software_cmdb.cleanTMP(systeminformation.getName())
    for rpm_hdr in rpms:
        try:
            (channelname, channelversion)=dsl.getChannelVersion(rpm_hdr)
            software_cmdb.updateRPM(rpm_hdr, systeminformation.getName(), channelname, channelversion, rpmnames.count(rpm_hdr["name"]))
        except:
            software_cmdb.dblog.log(logging.WARN, "Exception occured during update of rpm %s-%s-%s-%s." %(rpm_hdr["name"], rpm_hdr["version"], rpm_hdr["release"], rpm_hdr["arch"]), exc_info=True)
    software_cmdb.deleteNotInTmp(systeminformation.getName(), rpmfiles)
    software_cmdb.cleanTMP(systeminformation.getName())
    software_cmdb.db.commit()
elif options.action=="remove":
    source.removeSystemInformation(systeminformation, category)
    software_cmdb.clean(systeminformation.getName())
    source.dbloghandler.cleanLogs(systeminformation.getName())
    software_cmdb.db.commit()

# $Log: rpm2db.py,v $
# Revision 1.1  2006/08/08 08:32:38  marc
# initial revision
#