#!/usr/bin/python
"""
Creates context dependant symbolic links (cdsl). 
The process includes creating and copying of the relevant files and directories 
and building symbolic links. 
Needs a working cdsl infrastructure and a matching inventoryfile (Use com-mkcdsladm --list to validate). 
Can create hostdependent and shared cdsls.
"""
__version__ = "0.2-10"
__description__="""
Binary to manage cdsls
"""

import getopt
import sys
import logging
import os.path
logging.basicConfig()

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

from comoonics import ComLog
from comoonics.ComExceptions import ComException
#from comoonics import GetOpts

from comoonics.cluster import getClusterInfo, getClusterRepository
from comoonics.cdsl import dirtrim, commonoptparseroptions, get_defaultsfiles, get_defaultsenvkey
from comoonics.cdsl import getCdslRepository, getCdsl, CDSL_HOSTDEPENDENT_TYPE, CDSL_SHARED_TYPE
try:
    from comoonics.tools.poptparse import PersistentOptionParser as OptionParser
except ImportError:
    from optparse import OptionParser

usage = "usage: %prog [options] fullpathtofile"
parser = OptionParser(usage=usage, description=__doc__)
parser=commonoptparseroptions(parser)
parser.add_option("-a", "--hostdependent", dest="hostdependent", default=None, 
                  action="store_true", help="Creates hostdependent cdsl and copy src to all nodes")
parser.add_option("-s", "--shared", dest="hostdependent", default=None, 
                  action="store_false", help="Creates shared cdsl and copy src to shared tree")

parser.add_option("-b", "--backup", dest="backup", default=False, action="store_true", help="Switch on of keeping a backup of the original file as <filename>.orig.")
parser.add_option("-u", "--updateinventory", dest="updateinventory", default=False, action="store_true", help="""updates inventoryfile:
   if cdsl with given target does not exist in inventoryfile, add entry
   if it does not exist on filesystem but in inventoryfile, delete entry
   if it exists in inventoryfile but verifies from filesystem, update entry""")
parser.add_option("-S", "--resolved", dest="resolved", default=False, action="store_true", 
                  help="""Tell """+os.path.basename(sys.argv[0])+
                  """not to be clever and resolve the given path but take it as it is. 
ATTENTION: This option should not be used if you don't know what you are doing.. 
Default: %default""")

try:
    parser.setGlobalDefaultsFilename(get_defaultsfiles()[0])
    parser.setLocalDefaultsFilename(get_defaultsfiles()[1], get_defaultsenvkey())
except (TypeError, NameError):
    pass

ComLog.setLevel(logging.INFO)
parser.disable_interspersed_args()

#create cdsl objects
args=sys.argv[1:]
options=None
parentcdslRepository=None; cdslRepository=None
clusterRepository=None; clusterInfo=None
while args:
    (options, args) = parser.parse_args(args=args, values=options)
    if not parentcdslRepository:
        parentcdslRepository = getCdslRepository(resource=options.inventoryfile,root=options.root, nocreate=True)
    if not cdslRepository:
        if options.mountpoint != "" or options.mountpoint != "/":
            cdslRepository = getCdslRepository(resource=options.inventoryfile,root=options.root, 
                                               mountpoint=options.mountpoint, nocreate=True)
        else:
            cdslRepository=parentcdslRepository

    if not clusterRepository:
        clusterRepository = getClusterRepository(clusterconf=options.clusterconf, 
                                                 maxnodeidnum=int(parentcdslRepository.getMaxnodeidnum()))
    if not clusterInfo:
        clusterInfo = getClusterInfo(clusterRepository)

    if len(args) < 1:
        parser.error("Failure no ore more then one arguments given.")
    elif options.hostdependent == None:
        parser.error("You must specify the type of the cdsl to be created. Means either hostdendent (-a|--hostdependent) or shared (-s|--shared).")
        
    src=args[0]
    del args[0]
    nodes=[]
    if args[1:]:
        for arg in args:
            if os.path.exists(arg) or arg.startswith("-"):
                break
            nodes.append(arg)
        args=args[len(nodes):]
            
    if options.hostdependent:
        cdsltype=CDSL_HOSTDEPENDENT_TYPE
    else:
        cdsltype=CDSL_SHARED_TYPE
    
    try:
        obj = getCdsl(src=src, type=cdsltype, 
                      cdslrepository=cdslRepository, clusterinfo=clusterInfo, nodes=nodes,
                      realpath=not options.resolved)

        obj.commit(force=not options.backup)
        
        if options.updateinventory:
            cdslRepository.update(src, clusterInfo, chroot=options.root)
    except SystemExit, se:
        if se.code!=0:
            print >>sys.stderr, "Error: Could not create cdsl with command %s" %" ".join(sys.argv)
            print >>sys.stderr, "Error: %s" %str(e)
            ComLog.debugTraceLog("comoonics.cdsl")
            sys.exit(se.code)         
    except Exception, e:
        print >>sys.stderr, "Error: Could not create cdsl with command %s" %" ".join(sys.argv)
        print >>sys.stderr, "Error: %s" %str(e)
        ComLog.debugTraceLog("comoonics.cdsl")
        sys.exit(1) 