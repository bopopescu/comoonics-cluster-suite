#!/usr/bin/python

# here is some internal information
# $Id: channel2db.py,v 1.1 2006/08/08 08:32:38 marc Exp $
#

__version__ = "$revision$"
__description__="""
Updates all rpms from the given channel in DSL and DSL stage
"""

# $Source: /usr/ATIX/CVSROOT/projects/se/hilti/config/hoi_config/scripts/channel2db.py,v $
import sys

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

sys.path.append("/home/marc/atix/comoonics-clustersuite/python/lib")

from comoonics import ComLog
from comoonics import ComSystem, ComLog, ComExceptions
try:
    from comoonics.tools.poptparse import PersistentOptionParser as OptionParser
    from comoonics.cmdb import get_defaultsenvkey, get_defaultsfiles
except ImportError:
    from optparse import OptionParser
from optparse import OptionGroup
    
from comoonics.cmdb.ComDSL import DSL
from comoonics.cmdb.ComDSLStages import DSLStages
import logging.handlers

import os
import logging
import rpm
import sys

log=ComLog.getLogger(sys.argv[0])
logging.basicConfig()

def rpm2header(rpmname):
    # rpm.ts is an alias for rpm.TransactionSet
    log.debug("rpmfile: "+rpmname)
    ts = rpm.ts()
    fdno = os.open(rpmname, os.O_RDONLY)
    hdr = ts.hdrFromFdno(fdno)
    os.close(fdno)
    return hdr

ComLog.setLevel(logging.INFO)

try:
    cmd_parser=OptionParser(description=__description__, version=__version, usage="%prog channeldir channelname channelversion",
                              globaldefaultsfile=get_defaultsfiles()[0], localdefaultsfile=get_defaultsfiles()[1], 
                              localdefaultsenvkey=get_defaultsenvkey())
except (NameError, TypeError):
    cmd_parser=OptionParser(description=__description__, version=__version__, usage="%prog channeldir channelname channelversion [tablename]") 

cmd_parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="toggle verbose mode and be more helpful")
cmd_parser.add_option("-y", "--syslog", action="store", type="string", dest="syslog", default=None, help="Forward logmessages to given syslogserver.")
db_options = OptionGroup(cmd_parser, "Database Options")
db_options.add_option("-q", "--querydatabase", action="store_true", default=False, dest="querydatabase", help="Query a database instead of localhost on the fly.")
db_options.add_option("-d", "--database", action="store", type="string", dest="database", default="cmdb", help="Sets the databasename")
db_options.add_option("-H", "--hostname", action="store", type="string", dest="hostname", default="localhost", help="Sets the hostname for the database server")
db_options.add_option("-u", "--username", action="store", type="string", dest="username", help="Sets the database username")
db_options.add_option("-p", "--password", action="store", type="string", dest="password", help="Sets the database server password to the username")
db_options.add_option("-t", "--table", action="store", type="string", dest="table", default="dsl", help="Which table to be taken.")
cmd_parser.add_option_group(db_options)

opts, args=cmd_parser.parse_args()

if len(args) != 3:
    sys.stderr.write("Wrong number of parameters. Three parameters are required. See %prog --help for more information.")
    sys.exit(1)

channeldir=args[0]
channel=args[1]
channelversion=args[2]
headerfile="%s/headers/header.info" % self.channeldir
ComSystem.setExecMode("")
ComSystem.__EXEC_REALLY_DO=""

dsl=DSL(hostname=opts.hostname, user=opts.user, password=opts.password, database=opts.database)
dslstages=DSLStages(dbhandle=dsl.db)

if opts.syslog:
    sysloghandler=logging.handlers.SysLogHandler((opts.syslog, logging.handlers.SYSLOG_UDP_PORT), logging.handlers.SysLogHandler.LOG_USER)
    sysloghandler.setLevel(logging.INFO)
    dsl.log.addHandler(sysloghandler)
    dslstages.log.addHandler(sysloghandler)
    dslstages.dblog.addHandler(sysloghandler)

header=open(opts.headerfile, "r")

for line in header:
    line=line.splitlines(False)[0]
    srpm=line.split(":")[1]
    (srpm,file)=srpm.split("=")
    rpmhdr=rpm2header(opts.channeldir+"/"+file)
    dsl.updateRPM(rpmhdr, file, channel, channelversion, channeldir)
    dslstages.updateRPM(rpmhdr, channel, channelversion, int(opts.stage))

dsl.db.commit()

# $Log: channel2db.py,v $
# Revision 1.1  2006/08/08 08:32:38  marc
# initial revision
#