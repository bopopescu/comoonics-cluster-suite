#!/usr/bin/python
"""
The comoonics Enterprisecopy binary parses an xml configfile and then goes through every copy and modificationset and
does it.

"""


# here is some internal information
# $Id: com-ec,v 1.36 2011-02-03 14:45:04 marc Exp $
#


__version__ = "$Revision: 1.36 $"
__description__="""
The comoonics Enterprisecopy binary parses an xml configfile and then goes through every copy and modificationset and
does it.
"""
# $Source: /atix/ATIX/CVSROOT/nashead2004/management/comoonics-clustersuite/python/bin/com-ec,v $

from exceptions import Exception
import sys
import os
import xml.dom
import getopt
import logging
import warnings

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

#from comoonics import GetOpts

from comoonics import XmlTools
from comoonics.storage import ComLVM
from comoonics import ComSystem, ComLog
from comoonics.enterprisecopy import ComEnterpriseCopy, ComCopyset, ComModificationset, get_defaultsfiles, get_defaultsenvkey
try:
   from comoonics.tools.poptparse import PersistentOptionParser as OptionParser
except ImportError:
   from optparse import OptionParser 
from optparse import OptionGroup

#define some variables
values=dict()

XSLT_PATH="/opt/atix/comoonics-cs/xsl"
DEFAULT_XSLT="comoonics-enterprise-copy.xsl"

logging.basicConfig()

ComSystem.__EXEC_REALLY_DO=""
__logStrLevel__="com-ec"
console=logging.StreamHandler(sys.stdout)
consoleformater=logging.Formatter('-------------------%(name)-7s: %(levelname)-4s %(message)s--------------------')
console.setFormatter(consoleformater)
logger=logging.getLogger(__logStrLevel__)
logger.propagate=0
logger.setLevel(logging.INFO)
logger.addHandler(console)

def line(message=None):
   logger.info(message)

def setWarnings():
   warnings.filterwarnings(action = 'ignore', message='tempnam.*', category=RuntimeWarning)
   warnings.filterwarnings(action = 'ignore', message='.*SCSIWWIDResolver.*', category=UserWarning)

def applyValues(element, values):
   from comoonics import XmlTools
   return XmlTools.overwrite_attributes_with_xpaths(element, values)

# So next comes the part where we are going to detect the XSLT implemenation.
# This is still a bit "ugly" as the following code should go into classes 
# and not be here.
# Nevertheless this is a first shot to see how it works and if.
def defaultXSLTImplementation(**keys):
   import os
   # for RHEL5 we'll use libxslt if available otherwise xsltproc as preferred
   if os.uname()[2].find("el5") > 0:
      try:
         import libxml2
         import libxslt
         return "libxslt"
      except ImportError:
         pass
   try:
      xsltproc_cmd=keys.get("xsltproc_cmd", "xsltproc")
      ComSystem.execLocalOutput("%s --version &>/dev/null" %xsltproc_cmd, True)
      return "xsltproc"
   except ComSystem.ExecLocalException:
      try:
         import libxml2
         import libxslt
         return "libxslt"
      except ImportError:
         raise ImportError("""Cannot find a default XSLT implementation. 
Try to specify as command line parameter (--xsltimplementation).
Keep in mind:
Either libxslt (for python) is installed or xsltproc (normally part of libxslt) has to be found in the path.
Right now both seam not to be available. So please fix.""")

def parseXSLT(xmlbuf, xsltfile, validate, implementation="libxslt", **keys):
   try:
      method=globals()["parseXSLT_%s" %implementation]
      return method(xmlbuf, xsltfile, validate, **keys)
   except KeyError:
      raise KeyError("Cannot find XSLT implemenation method by name %s." %implementation)
   
def parseXSLT_libxslt(xmlbuf, xsltfile, validate, **keys):
   try:
      import libxslt
      import libxml2
      buf2=xmlbuf.getvalue()
      n_doc = libxml2.parseMemory(buf2, len(buf2))
#        if options.values:
#            applyValues(n_doc, options.values)
      style = libxml2.parseFile(xsltfile)
      xslt_style = libxslt.parseStylesheetDoc(style)
      params={}
      res = xslt_style.applyStylesheet(n_doc, params)
      str_buff=xslt_style.saveResultToString(res)
      xslt_style.freeStylesheet()
      n_doc.freeDoc()
      res.freeDoc()
      doc=XmlTools.parseXMLString(str_buff, validate)
      libxslt.cleanup()
      return doc
   except ImportError, ie:
      raise ImportError("""Could not import xslt functionality for this plattform (libxslt, libxml2 for python).
Either find a package that provides this libraries or
don't use xslt translations.""")
   except Exception, e:
      line("Could not apply stylesheet to document. Quitting. Error: %s" %e)
      ComLog.debugTraceLog()
      raise e

def parseXSLT_xsltproc(xmlbuf, xsltfile, validate, **keys):
   try:
      import subprocess
      xsltproc_cmd=keys.get("xsltproc_cmd", None)
      if not xsltproc_cmd:
         xsltproc_cmd=ComSystem.execLocalOutput("which xsltproc 2>/dev/null", True).strip()
      ComSystem.execLocalOutput("%s --version >/dev/null" %xsltproc_cmd)
   except ComSystem.ExecLocalException, exc:
      raise ImportError("""Could not find or import xslt functionality for this platform (libxslt, libxml2 for python).
Either find a package that provides this libraries or
don't use xslt translations.""")
   if not validate:
      xsltproc_cmd+=" --novalid"
   cmd="%s %s -" %(xsltproc_cmd, xsltfile)
   p=subprocess.Popen([cmd], shell=True, 
                      stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                      close_fds=True)
   p.stdin.write(xmlbuf.getvalue())
   p.stdin.close()
   doc=XmlTools.parseXMLFP(p.stdout, validate)
   p.wait()
   if p.returncode != 0:
      line("Could not apply stylesheet to document. Quitting. Error: %s" %p.stderr.readlines())
      ComLog.debugTraceLog()
      raise ComSystem.ExecLocalException(cmd, p.returncode, p.stdout.read(), "Could not apply stylesheet to document. Quitting. Error: %s" %p.stderr.readlines())
   else:
      return doc

parser = OptionParser(description=__doc__, usage="usage: %prog [options] xmlfilename [name=value]*")
# Flags
parser.add_option("-v", "--verbose",     dest="debug",     default=False, action="store_true", help="toggle debugmode and be more helpful")
parser.add_option("-a", "--ask",      dest="ask",      default=False, action="store_true", help="ask before any being command executed")
parser.add_option("-U", "--noundo",    dest="noundo",    default=False, action="store_true", help="don't do the undoing if anything goes wrong")
parser.add_option("-S", "--simulate",   dest="simulate",   default=False, action="store_true", help="don't execute anything just simulate. Only valid for developer. It might not do what you expect!")

# Options
ec_options=OptionGroup(parser, "Copyset Options")
ec_options.add_option("-c", "--copyset",       dest="copyset",       action="append", help="<name>|all: only do all or the given copy set")
ec_options.add_option("-m", "--modificationset", dest="modificationset", action="append", help="<name>|all: only do all or the given modification set")
ec_options.add_option("-s", "--set",          dest="sets",          action="append", help="Execute the given sets. Multiple allowed")
parser.add_option_group(ec_options)

xml_options=OptionGroup(parser, "XML/XSLT Options")
xml_options.add_option("-x", "--xslt",         dest="xslt",         help="preconvert xmlfile with given xsltfile.")
xml_options.add_option("-X", "--onlydisplay",dest="onlydisplay",default=False, action="store_true", help="only display the resulting dom as xml")
xml_options.add_option("-n", "--novalidate", dest="novalidate", default=True, action="store_true", help="novalidate don't validate the xml. Handle with care!!!")
xml_options.add_option("", "--xsltimplementation", dest="xsltimplementation", default=defaultXSLTImplementation(), help="Use the following XSLT implementation (values are: libxslt, xsltproc), Default: %default")
xml_options.add_option("", "--xsltproc-cmd", dest="xsltproc_cmd", default=None, help="Specify the path to find xsltproc if not in path. Default get from path.")
parser.add_option_group(xml_options)
try:
   parser.setGlobalDefaultsFilename(get_defaultsfiles()[0])
   parser.setLocalDefaultsFilename(get_defaultsfiles()[1], get_defaultsenvkey())
except (TypeError, NameError):
   pass

(options, args) = parser.parse_args()

if options.debug:
   ComLog.getLogger().propagate=1
   ComLog.setLevel(logging.DEBUG)
else:
   ComLog.setLevel(logging.INFO)

import os.path
i=0
if len(args):
   values["args%u" %i]=args[i]
   values["%u" %i]=args[i]
i+=1
if len(args) > 1:
   for arg in args[1:]:
      if arg.find("=")>0:
         (name, value)=arg.split("=")
         values[name]=value
      values["args%u" %i]=args[i]
      values["%u" %i]=args[i]
      i+=1
if len(args) > 0 and os.path.isfile(args[0]):
   filename=args[0]
elif len(args) == 0:
   logger.critical("No file given to execute.")
   sys.exit(1)
else:
   logger.critical("Could not find file %s" %(args[0]))
   sys.exit(1)

# filter warnings
if not options.debug:
   setWarnings()

if not filename:
   print "No file as input given exiting."
   parser.usage()
   sys.exit(1)

try:
   xmlfile=open(filename,"r")
   line("Parsing document %s " % filename)
   import cStringIO
   xmlbuf=cStringIO.StringIO()
   for myline in xmlfile:
      try:
         myline=myline %values
      except KeyError:
         pass
      except ValueError:
         pass
      xmlbuf.write(myline)
   xmlfile.close()
   if options.xslt:
      doc=parseXSLT(xmlbuf, options.xslt, not options.novalidate, options.xsltimplementation, **options.__dict__)
   else:
     from xml.dom.ext.reader import Sax2
     reader = Sax2.Reader(validate=0)
     doc = reader.fromString(xmlbuf.getvalue())

   if options.onlydisplay:
      print XmlTools.toPrettyXML(doc)
      sys.exit(0)

   ecopy=ComEnterpriseCopy.getEnterpriseCopy(doc.documentElement, doc)
   logger=ComLog.getLogger(__logStrLevel__)
   if options.ask:
      ComSystem.__EXEC_REALLY_DO=ComSystem.ASK
   if options.simulate:
      ComSystem.__EXEC_REALLY_DO=ComSystem.SIMULATE
except KeyboardInterrupt:
   logger.warn("Leaving because of user signal")
   sys.exit(1)
except SystemExit, se:
   sys.exit(se)
except Exception, e:
   ComLog.debugTraceLog()
   logger.error("Error occured during initialisation of enterprisecopy. Errormessage: %s." %(e))
   sys.exit(2)

if ecopy.hasAttribute("name"):
   name=ecopy.getAttribute("name")
else:
   name=filename

line("Start of enterprisecopy %s" %(name))
try:
   if not options.copyset and not options.modificationset and not options.sets:
      line("Executing all sets %u" % (len(ecopy.allsets)))
      ecopy.doAllsets()
   else:
      if options.copyset:
         line("Executing copyset %s" % (options.copyset))
         ecopy.doCopysets(options.copyset)

      if options.modificationset:
         line("Executing modificationset %s" % (options.modificationset))
         ecopy.doModificationsets(options.modificationset)

      if options.sets:
         line("Executing sets %s" %(options.sets))
         ecopy.doAllsets(options.sets)

   line("Finished execution of enterprisecopy %s successfully" % (name))
except KeyboardInterrupt:
   logger.warn("Leaving enterprisecopy %s because of user signal" %(name))
   sys.exit(1)
except Exception, e:
   if ecopy.getCurrentSet():
      logger.error("Error occured during execution of enterprisecopy %s in set %s. Errormessage: %s." %(name, ecopy.getCurrentSet().getAttribute("name", "unknown"), e))
   else:
      logger.error("Error occured during execution of enterprisecopy %s. Errormessage: %s." %(name, e))
   ComLog.debugTraceLog()
   if options.noundo:
      line("Finished execution of enterprisecopy with errors. Skipping undo on request")
   elif len(ecopy.donesets)>0:
      line("Undoing %u sets" % (len(ecopy.donesets)))
      if options.copyset:
         ecopy.undoCopysets(options.copyset)
      elif options.modificationset:
         ecopy.undoModificationsets(options.modificationset)
      elif options.sets:
         ecopy.undo(options.sets)
      else:
         ecopy.undo()

   line("Errors during execution of enterprisecopy %s." %(name))
   sys.exit(2)
