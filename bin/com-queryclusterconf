#!/usr/bin/python
"""
Binary to query clusterconfiguration
"""
__version__ = "$Revision: 1.24 $"
__description__="""
Binary to query clusterconfiguration
"""

import getopt
import sys
import logging
import os
import os.path

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

from comoonics import ComLog
from comoonics.ComExceptions import ComException

from comoonics.cluster import getClusterInfo, getClusterRepository, QueryMap, parseClusterConf
from comoonics.cluster import clusterconf, commonoptparseroptions, querymapfile, get_defaultsfiles, get_defaultsenvkey
try:
    from comoonics.tools.poptparse import PersistentOptionParser as OptionParser, OptionGroup
except ImportError:
    from optparse import OptionParser, OptionGroup

def printResult(result, options, params, paramsparsestring="\%\([a-zA-Z0-9_]+\)", outbuf=None):
    from comoonics.ComDataObject import DataObject
    import warnings
    import StringIO
    import re
    import comoonics.XmlTools
    import xml.dom
    if not outbuf:
        outbuf=sys.stdout

    if isinstance(result, xml.dom.Node) and result.nodeType==xml.dom.Node.ATTRIBUTE_NODE:
        result=result.nodeValue
    logger.debug("result: %s" %result)
    if result and options.properties and isinstance(result, xml.dom.Node):
        obj=DataObject(result)
        outbuf.write(obj.getProperties().list())
    elif result:
        if isinstance(result, xml.dom.Node):
            if result.nodeType == xml.dom.Node.ATTRIBUTE_NODE or result.nodeType == xml.dom.Node.TEXT_NODE or result.nodeType == xml.dom.Node.CDATA_SECTION_NODE:
                if options.prettyprint:
                    comoonics.XmlTools.toPrettyXMLFP(result, outbuf)
                else:
                    outbuf.write(result.nodeValue)
            elif options.prettyprint:
                comoonics.XmlTools.toPrettyXMLFP(result, outbuf)
            else:
                comoonics.XmlTools.toPrettyXMLFP(result, outbuf)
        elif isinstance(result, list):
            _results=list()
            for _result in result:
                _buf=StringIO.StringIO()
                printResult(_result, options, params, paramsparsestring, _buf)
                _results.append(_buf.getvalue())
            outbuf.write(options.seperator.join(_results))
        else:
            if not options.nowarnings and options.properties:
                warnings.warn("Properties output selected but a queryvalue is returned. Properties can only be output with paths that lead to elements.")
            logger.debug("replacing %s in result %s" %(params, str(result)))
            count=len(re.findall(paramsparsestring, str(result)))
            if count > 0:
                outbuf.write(str(result) %params)
            else:
                outbuf.write(result)

def setupInputParser(queriesfile, args):
    import shlex
    if queriesfile and queriesfile == "-":
        parser=shlex.shlex()
    elif queriesfile:
        parser=shlex.shlex(file(queriesfile), queriesfile)
    elif isinstance(args, list):
        parser=shlex.shlex(" ".join(args))
    else:
        parser=shlex.shlex(str(args))
    parser.wordchars+='\/[@]\'="():-_*+~.,;!?&%$'
    parser.escapes=""
    parser.quotes=""

    return parser

def step2nextquery(parser):
    arg=parser.get_token()
    while arg:
        if arg == "query" or arg.startswith("query="):
            parser.push_token(arg)
            return parser
        arg=parser.get_token()
    return parser
                    
def parserQueryParams(parser):
    arg=parser.get_token()
    params=list()
    while arg:
        if arg == "query" or arg.startswith("query="):
            parser.push_token(arg)
            return params
        params.append(arg)
        arg=parser.get_token()
    return params
    
ComLog.setLevel(logging.INFO)
usage = """
usage: %prog [options] query_command params|("query="query_command params)+
query_commands are:
    query_xml <xq>           print out the xml_document specified by an XQL query string
    query_value <xql>        print out the value specified by an XQL query string
    convert type             converts the cluster repository to the given type (supported types are: ocfs2) 
    netdevs <hostname>
                             print out the network device names for given host. Separated by <sep>
    nodename <mac>           print out the nodename for given mac.
    nodenamebyid <id>        print out the nodename for given nodeid.
    nodeid <mac>             print out the nodeid for given mac.
    ip <nodename> <dev>      print out the IP address for given hostname and network device name
    master <nodename> <dev>  print out the master if for given hostname and network device name
    slave <nodename> <dev>   print out the slave for given hostname and network device name
    mask <nodename <dev>     print out the netmask for given hostname and network device name
    gateway <nodename <dev>  print out the gateway for given hostname and network device name
    hosts                    print out the the hosts in hosts file type
    ifconfig <mac>           print out the the ifconfig parameter for mac
    rootvolume <nodename>    print out the device name for the root device
    rootfs <nodename>        print out the filesystem name for the root device
    mountopts <nodename>     print out the mountoptions for the nodename
    syslog <nodename>        print out the syslog server
    failoverdomainnodes <failoverdomain>
                             print out all defined nodes in the given
                             failoverdomain. Seperated by sep default is space.
    failoverdomainprefnode <failoverdomain>
                             print out the preferred node defined in
                             the given failoverdomain.
    nodeids                  returns all defined nodeids seperated by <sep>.
    scsifailover nodename    returns the scsifailovertype for the given nodename
        """
parser = OptionParser(usage=usage, description=__doc__)
parser=commonoptparseroptions(parser)
# This is obsolete as it is always true but has to stay because of backwards compatibility
generalopts=OptionGroup(parser, "General options.")
generalopts.add_option("-f", "--filename", dest="clusterconf", default=clusterconf,
                  help="Overwrite xml file used for input. Default: %default.")
generalopts.add_option("-Q", "--queriesfile", dest="queriesfile", default=None, 
                       help="If given this file will be read as query file instead of commandlineargs. If - stdin will be used. Default: %default.")
generalopts.add_option("-m", "--querymapfile", dest="mapfile", default=querymapfile, 
                       help="External file for query mappings. Default: %default")
generalopts.add_option("-V", "--validate", dest="validate", default=False, action="store_true", help="Validate the cluster configuration if possible.")

queryopts=OptionGroup(parser, "Query options")
queryopts.add_option("-q", "--query",      dest="query",       default=True,  action="store_true",  
                     help="Query the cluster. Default: %default")
queryopts.add_option("-p", "--properties", dest="properties",  default=False, action="store_true",  
                     help="Return all properties found at the given querypath. Default: %default.")
outputopts=OptionGroup(parser, "Output options")
outputopts.add_option("-W", "--nowarnings", dest="nowarnings",  default=False, action="store_true",  
                      help="Suppress warnings emitted by this command. Default: %default.")
outputopts.add_option("-Y", "--pretty",     dest="prettyprint", default=False, action="store_true",  
                      help="Output XML in pretty format. Default: %default.")
outputopts.add_option("-E", "--evalparams", dest="evalparams",  default=True,  action="store_false", 
                      help="Toggles the evalution of params both in the result and query. Default %default.")
# again because of compatibilities
# -c --clusterconf should be used.
outputopts.add_option("-s", "--seperator", dest="seperator", default=None, 
                      help="Howto seperate values of returned lists. Default=%default")
outputopts.add_option("-P", "--prefix", dest="prefix", default="", 
                      help="The query result is prefixed by this given string. Default: \"%default\"")
outputopts.add_option("-S", "--suffix", dest="suffix", default="", 
                      help="The query result is suffixed by this given string. Default: \"%default\"")

parser.add_option_group(generalopts)
parser.add_option_group(queryopts)
parser.add_option_group(outputopts)

try:
    parser.setGlobalDefaultsFilename(get_defaultsfiles()[0])
    parser.setLocalDefaultsFilename(get_defaultsfiles()[1], get_defaultsenvkey())
except (TypeError, NameError):
    pass

ComLog.setLevel(logging.INFO)
logger=ComLog.getLogger("comoonics.cluster.com-queryclusterconf")
(options, values) = parser.parse_args()

if len(values)<=0 and not options.queriesfile:
    parser.error("Wrong number of arguments. At least one is required. None given.")
if not os.path.isfile(options.clusterconf):
    parser.error("Could not find clusterconfiguration file %s" %(options.clusterconf))

doc=parseClusterConf(options.clusterconf, options.validate)

#create needed cluster objects
clusterRepository = getClusterRepository(doc.documentElement,doc)
clusterInfo = getClusterInfo(clusterRepository)
clusterQueryMap = QueryMap(options.mapfile, clusterInfo)

result=None

parser=setupInputParser(options.queriesfile, values)
params=None
paramsparsestring="\%\([a-zA-Z0-9_]+\)"

errors=0
for token in parser:
    query=token
    logger.debug("query: %s" %(query))
    try:
        if query.startswith("query="):
            query=query[len("query="):]
        #query given file with specified query, returns xml
        if query == "query_xml":
            if options.seperator==None:
                options.seperator="\n"
            result=clusterInfo.queryXml(parser.get_token())
    
        #query given file with specified query, returns value
        elif query == "query_value":
            if options.seperator==None:
                options.seperator=" "
            result=clusterInfo.queryValue(parser.get_token())

        #print clusters network devices by name, separated by value of options.netdevs    
        elif query == "netdevs":
            result = []
            if options.seperator==None:
                options.seperator=" "
            key=parser.get_token()
            try:
                node=clusterInfo.getNode(key)
            except KeyError:
                node=clusterInfo.getNodeFromId(key)
        
            for Nic in node.getNics():
                result.append(Nic.getName())

        #Query Nodename to given mac, raise exception if mac not found
        elif query == "nodename":
            result=clusterInfo.getNodeName(parser.get_token())
    
        #Query Nodename to given id, raise exception if id not found
        elif query == "nodenamebyid":
            result=clusterInfo.getNodeNameById(parser.get_token())

        #Query Nodeid to given mac, raise exception if mac not found
        elif query == "nodeid":
            result=clusterInfo.getNodeId(parser.get_token())
    
        #print ip of given node and given device
        elif query == "ip":
            _node = clusterInfo.getNode(parser.get_token())
            _nic = _node.getNic(parser.get_token())
            result=_nic.getIP()

        #print ip of given node and given device
        elif query == "master":
            _node = clusterInfo.getNode(parser.get_token())
            _nic = _node.getNic(parser.get_token())
            result=_nic.getMaster()

        #print ip of given node and given device
        elif query == "slave":
            _node = clusterInfo.getNode(parser.get_token())
            _nic = _node.getNic(parser.get_token())
            result=_nic.getSlave()

        #print ip of given node and given device
        elif query == "mask":
            _node = clusterInfo.getNode(parser.get_token())
            _nic = _node.getNic(parser.get_token())
            result=_nic.getNetmask()

        #print ip of given node and given device
        elif query == "gateway":
            _node = clusterInfo.getNode(parser.get_token())
            _nic = _node.getNic(parser.get_token())
            result=_nic.getGateway()

        #print list of clusters host with if and name
        #FIXME: Returns only first ip-address<->name pair of every clusternode to avoid duplicate entries for the same hostname
        elif query == "hosts":
            result=[]
            if options.seperator==None:
                options.seperator="\n"
            for node in clusterInfo.getNodes():
                for Nic in node.getNics():
                    if Nic.getIP() != "" and Nic.getIP() != "dhcp":
                        result.append("%s \t%s" %(Nic.getIP(), node.getName()))
                        break

        #print ifconfig for given mac, raise exception if mac not found
        elif query == "ifconfig":
            if options.seperator==None:
                options.seperator=" "

            _mac=parser.get_token()
            for node in clusterInfo.getNodes():
                if node.nicMac.has_key(_mac):
                    _nic = node.nicMac[_mac]
                    result=[ _nic.getName(), _nic.getIP(), _nic.getNetmask() ]
                    if options.properties:
                        result.update(_nic.getProperties().list(options.seperator))
                    break
            if not result:
                raise ClusterMacNotFoundException("Cannot find ipconfig for mac-address " + _mac)

        #print rootvolume of node with given name
        elif query == "rootvolume":
            result=clusterInfo.getNode(parser.get_token()).getRootvolume()

        #print rootfs of node with given name
        elif query == "rootfs":
            result=clusterInfo.getNode(parser.get_token()).getRootFs()
    
        #print mount options of node with given name
        elif query == "mountopts":
            result=clusterInfo.getNode(parser.get_token()).getMountopts()

        #print syslog of node with given name
        elif query == "syslog":
            result=clusterInfo.getNode(parser.get_token()).getSyslog()

        #print failoverdomainnodes belonging to given failoverdomain, seperated by <sep>
        elif query == "failoverdomainnodes":
            result=clusterInfo.getFailoverdomainNodes(parser.get_token())

        #prints prefered failover node belonging to given failoverdomain
        elif query == "failoverdomainprefnode":
            result=clusterInfo.getFailoverdomainPrefNode(parser.get_token())

        #print list of nodeids, seperated by given value
        elif query == "nodeids":
            if options.seperator==None:
                options.seperator=" "

            result = []
            for node in clusterInfo.getNodes():
                result.append(node.getId())

        #print scsifailover of node with given name
        elif query == "scsifailover":
            result=clusterInfo.getNode(parser.get_token()).getScsifailover()
    
        elif query == "convert":
            result=clusterInfo.clusterRepository.convert(parser.get_token())

        elif clusterQueryMap.has_option(clusterQueryMap.mainsection, query):
            import re
            querymethod=getattr(clusterInfo, "queryValue")
            if options.seperator==None:
                options.seperator=" "

            if options.evalparams:
                params = clusterQueryMap.array2params(parserQueryParams(parser))

            _query=clusterQueryMap.get(clusterQueryMap.mainsection, query)
            count=len(re.findall(paramsparsestring, _query))
            if _query.startswith("xml:"):
                _query=_query[len("xml:"):]
                querymethod=getattr(clusterInfo, "queryXml")

            if params:
                _query=_query % params
            logger.debug("Query: %s" %_query)
            result=querymethod(_query)
#            
#        for i in range(count):
#            parser.get_token()
    
        else:
            raise NameError("Cannot find query named " + query)

        if result:
            sys.stdout.write("%s" %options.prefix)
            printResult(result, options, params)
            logger.debug("Suffix: " +options.suffix)
            sys.stdout.write(""+options.suffix)
        else:
            errors=1
    except Exception, e:
        sys.stderr.write("""Error: %s 
During query: %s. 
Command: %s
""" %(e, query, " ".join(sys.argv)))
        ComLog.debugTraceLog()
        errors=errors+1
    if parser:
        step2nextquery(parser)

sys.exit(errors)
###########
# $Log: com-queryclusterconf,v $
# Revision 1.24  2011-02-21 16:25:56  marc
# result will be forced to be converted in string.
#
# Revision 1.23  2010/11/22 10:16:25  marc
# - fixed bug with replacing runtime parameters %{params..}
#
# Revision 1.22  2010/11/21 21:49:26  marc
# - fixed bug 391
#   - moved to upstream XmlTools implementation
#   - finished implementation of XmlTools
#
# Revision 1.21  2010/06/25 12:19:56  marc
# - change to exit code if a query fails
#
# Revision 1.20  2010/03/08 12:42:01  marc
# version for comoonics4.6-rc1
#
# Revision 1.19  2010/02/16 10:37:36  marc
# fixed error handling
#
# Revision 1.18  2010/02/16 10:29:34  marc
# added logging.basicConfig()
#
# Revision 1.17  2010/02/05 12:25:27  marc
# - implemented properties output
# - added querymap to be working
# - more fuzzy
#