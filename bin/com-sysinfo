#!/usr/bin/python

# here is some internal information
# $Id: rpm2db.py,v 1.1 2006/08/08 08:32:38 marc Exp $
#

__version__ = "$revision$"
__description__="""
Programm to retrieve systeminformation from the database
"""

# $Source: /usr/ATIX/CVSROOT/projects/se/hilti/config/hoi_config/scripts/rpm2db.py,v $
import sys
import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

from comoonics import ComLog
from comoonics.ComExceptions import ComException
try:
    from comoonics.tools.ComSystemInformation import getSystemInformation as SystemInformation
except ImportError:
    from comoonics.ComSystemInformation import SystemInformation
import logging
from datetime import timedelta
try:
    from comoonics.tools.poptparse import PersistentOptionParser as OptionParser
    from comoonics.tools import get_defaultsenvkey, get_defaultsfiles
except ImportError:
    from optparse import OptionParser
from optparse import OptionGroup, make_option
logging.basicConfig()

version="0.1"

ComLog.setLevel(logging.INFO)

usage="usage: %prog [options] [systemname]*"
cmd_options= [ make_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="toggle verbose mode to be more helpful"),
               make_option("-y", "--syslog", action="store", type="string", dest="syslog", default="", help="Forward logmessages to given syslogserver")]
try:
    cmd_parser = OptionParser(option_list=cmd_options, usage=usage, version="Version %s" %(version), 
                              globaldefaultsfile=get_defaultsfiles()[0], localdefaultsfile=get_defaultsfiles()[1], localdefaultsenvkey=get_defaultsenvkey())
except (NameError, TypeError):
    cmd_parser = OptionParser(option_list=cmd_options, usage=usage, version="Version %s" %(version)) 
sysinfo_options = OptionGroup(cmd_parser, "System Information Options")
sysinfo_options.add_option("-i", "--installedsoftware", action="store_true", default=False, dest="installedsoftware", help="Also query the installed software.")
db_options = OptionGroup(cmd_parser, "Database Options")
db_options.add_option("-q", "--querydatabase", action="store_true", default=False, dest="querydatabase", help="Query a database instead of localhost on the fly.")
db_options.add_option("-d", "--database", action="store", type="string", dest="database", default="cmdb", help="Sets the databasename")
db_options.add_option("-H", "--hostname", action="store", type="string", dest="hostname", default="localhost", help="Sets the hostname for the database server")
db_options.add_option("-u", "--username", action="store", type="string", dest="username", help="Sets the database username")
db_options.add_option("-p", "--password", action="store", type="string", dest="password", help="Sets the database server password to the username")
db_options.add_option("-t", "--table", action="store", type="string", dest="table", default="software_cmdb", help="Which table to be taken.")
cmd_parser.add_option_group(sysinfo_options)
cmd_parser.add_option_group(db_options)
options, args = cmd_parser.parse_args()

if options.querydatabase and not args:
    sys.stderr.write("""Query database is selected but no systemname given. 
Please enter at least one systemname to be queried.

If unsure get help with com-sysinfo --help.
""")
    sys.exit(1)

if options.verbose:
    ComLog.setLevel(logging.DEBUG)

if options.syslog:
    sysloghandler=logging.handlers.SysLogHandler((options.syslog, logging.handlers.SYSLOG_UDP_PORT), logging.handlers.SysLogHandler.LOG_USER)
    source.log.addHandler(sysloghandler)

if options.querydatabase:
    from comoonics.cmdb.ComSource import Source
    source=Source(hostname=options.hostname, user=options.username, password=options.password, database=options.database, table=options.table)
    for systemname in args:
        sysinfos=source.getSourcesAsSysteminformations(systemname)
else:
    sysinfos=[SystemInformation()]

for sysinfo in sysinfos:
    print sysinfo
    print """
Systemname:       %s
Features:         %s
Architecture:     %s
Uptime:           %s
Type:             %s
Operating system: %s
""" %(sysinfo.getName(), sysinfo.getFeatures(), sysinfo.getArchitecture(), timedelta(seconds=int(sysinfo.getUptime())), sysinfo.getType(), sysinfo.getOperatingsystem())
    if options.installedsoftware:
        print "Installed Software: "
        print "\n".join(sysinfo.getInstalledSoftware())

# $Log: rpm2db.py,v $
# Revision 1.1  2006/08/08 08:32:38  marc
# initial revision
#